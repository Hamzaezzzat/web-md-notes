{"ast":null,"code":"var _jsxFileName = \"/Applications/MAMP/htdocs/Learning/scrimbs/Section 4/web-md-notes/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Sidebar from \"./components/Sidebar\";\nimport Editor from \"./components/Editor\";\nimport \"./style.css\";\nimport { data } from \"./data\";\nimport Split from \"react-split\";\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  /**\n   * Challenge:\n   * 1. Every time the `notes` array changes, save it\n   *    in localStorage. You'll need to use JSON.stringify()\n   *    to turn the array into a string to save in localStorage.\n   * 2. When the app first loads, initialize the notes state\n   *    with the notes saved in localStorage. You'll need to\n   *    use JSON.parse() to turn the stringified array back\n   *    into a real JS array.\n   */\n  const [notes, setNotes] = React.useState(() => JSON.parse(localStorage.getItem(\"notes\")) || []);\n  const [currentNoteId, setCurrentNoteId] = React.useState(notes[0] && notes[0].id || \"\"); // console.log(notes);\n\n  function createNewNote() {\n    const newNote = {\n      id: nanoid(),\n      body: \"# Type your markdown note's title here\"\n    };\n    setNotes(prevNotes => [newNote, ...prevNotes]);\n    setCurrentNoteId(newNote.id);\n  }\n\n  console.log(123);\n\n  function updateNote(text) {\n    setNotes(oldNotes => {\n      const newArray = [];\n\n      for (let i = 0; i < oldNotes.length; i++) {\n        const oldNote = oldNotes[i];\n\n        if (oldNote.id === currentNoteId) {\n          newArray.unshift({ ...oldNote,\n            body: text\n          });\n        } else {\n          newArray.push(oldNote);\n        }\n      }\n\n      return newArray;\n    });\n    localStorage.setItem(\"notes\", JSON.stringify(notes));\n  }\n\n  function findCurrentNote() {\n    return notes.find(note => {\n      return note.id === currentNoteId;\n    }) || notes[0];\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: notes.length > 0 ? /*#__PURE__*/_jsxDEV(Split, {\n      sizes: [30, 70],\n      direction: \"horizontal\",\n      className: \"split\",\n      children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n        notes: notes,\n        currentNote: findCurrentNote(),\n        setCurrentNoteId: setCurrentNoteId,\n        newNote: createNewNote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }, this), currentNoteId && notes.length > 0 && /*#__PURE__*/_jsxDEV(Editor, {\n        currentNote: findCurrentNote(),\n        updateNote: updateNote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-notes\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"You have no notes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"first-note\",\n        onClick: createNewNote,\n        children: \"Create one now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n} // If we Need to put every not into key value in localStorage\n\n/*\n    function updateLocalStorage() {\n        notes.filter((el) => {\n            if (el[\"id\"] === currentNoteId) {\n                currentNoteBody = el.body;\n            }\n        });\n        localStorage.setItem(\n            JSON.stringify(currentNoteId),\n            JSON.stringify(currentNoteBody)\n        );\n    }\n*/\n\n_s(App, \"6nirTvCIDxWU1ua4tW/NQjt2U9A=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Sidebar","Editor","data","Split","nanoid","App","notes","setNotes","useState","JSON","parse","localStorage","getItem","currentNoteId","setCurrentNoteId","id","createNewNote","newNote","body","prevNotes","console","log","updateNote","text","oldNotes","newArray","i","length","oldNote","unshift","push","setItem","stringify","findCurrentNote","find","note"],"sources":["/Applications/MAMP/htdocs/Learning/scrimbs/Section 4/web-md-notes/src/App.js"],"sourcesContent":["import React from \"react\";\nimport Sidebar from \"./components/Sidebar\";\nimport Editor from \"./components/Editor\";\nimport \"./style.css\";\nimport { data } from \"./data\";\nimport Split from \"react-split\";\nimport { nanoid } from \"nanoid\";\n\nexport default function App() {\n    /**\n     * Challenge:\n     * 1. Every time the `notes` array changes, save it\n     *    in localStorage. You'll need to use JSON.stringify()\n     *    to turn the array into a string to save in localStorage.\n     * 2. When the app first loads, initialize the notes state\n     *    with the notes saved in localStorage. You'll need to\n     *    use JSON.parse() to turn the stringified array back\n     *    into a real JS array.\n     */\n\n    const [notes, setNotes] = React.useState(\n        () => JSON.parse(localStorage.getItem(\"notes\")) || []\n    );\n\n    const [currentNoteId, setCurrentNoteId] = React.useState(\n        (notes[0] && notes[0].id) || \"\"\n    );\n    // console.log(notes);\n    function createNewNote() {\n        const newNote = {\n            id: nanoid(),\n            body: \"# Type your markdown note's title here\",\n        };\n        setNotes((prevNotes) => [newNote, ...prevNotes]);\n        setCurrentNoteId(newNote.id);\n    }\n    console.log(123);\n    function updateNote(text) {\n        setNotes((oldNotes) => {\n            const newArray = [];\n            for (let i = 0; i < oldNotes.length; i++) {\n                const oldNote = oldNotes[i];\n                if (oldNote.id === currentNoteId) {\n                    newArray.unshift({ ...oldNote, body: text });\n                } else {\n                    newArray.push(oldNote);\n                }\n            }\n            return newArray;\n        });\n\n        localStorage.setItem(\"notes\", JSON.stringify(notes));\n    }\n\n    function findCurrentNote() {\n        return (\n            notes.find((note) => {\n                return note.id === currentNoteId;\n            }) || notes[0]\n        );\n    }\n\n    return (\n        <main>\n            {notes.length > 0 ? (\n                <Split\n                    sizes={[30, 70]}\n                    direction=\"horizontal\"\n                    className=\"split\"\n                >\n                    <Sidebar\n                        notes={notes}\n                        currentNote={findCurrentNote()}\n                        setCurrentNoteId={setCurrentNoteId}\n                        newNote={createNewNote}\n                    />\n                    {currentNoteId && notes.length > 0 && (\n                        <Editor\n                            currentNote={findCurrentNote()}\n                            updateNote={updateNote}\n                        />\n                    )}\n                </Split>\n            ) : (\n                <div className=\"no-notes\">\n                    <h1>You have no notes</h1>\n                    <button className=\"first-note\" onClick={createNewNote}>\n                        Create one now\n                    </button>\n                </div>\n            )}\n        </main>\n    );\n}\n\n// If we Need to put every not into key value in localStorage\n/*\n    function updateLocalStorage() {\n        notes.filter((el) => {\n            if (el[\"id\"] === currentNoteId) {\n                currentNoteBody = el.body;\n            }\n        });\n        localStorage.setItem(\n            JSON.stringify(currentNoteId),\n            JSON.stringify(currentNoteBody)\n        );\n    }\n*/\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAO,aAAP;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,MAAT,QAAuB,QAAvB;;AAEA,eAAe,SAASC,GAAT,GAAe;EAAA;;EAC1B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEI,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,KAAK,CAACS,QAAN,CACtB,MAAMC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,KAA6C,EAD7B,CAA1B;EAIA,MAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCf,KAAK,CAACS,QAAN,CACrCF,KAAK,CAAC,CAAD,CAAL,IAAYA,KAAK,CAAC,CAAD,CAAL,CAASS,EAAtB,IAA6B,EADS,CAA1C,CAhB0B,CAmB1B;;EACA,SAASC,aAAT,GAAyB;IACrB,MAAMC,OAAO,GAAG;MACZF,EAAE,EAAEX,MAAM,EADE;MAEZc,IAAI,EAAE;IAFM,CAAhB;IAIAX,QAAQ,CAAEY,SAAD,IAAe,CAACF,OAAD,EAAU,GAAGE,SAAb,CAAhB,CAAR;IACAL,gBAAgB,CAACG,OAAO,CAACF,EAAT,CAAhB;EACH;;EACDK,OAAO,CAACC,GAAR,CAAY,GAAZ;;EACA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;IACtBhB,QAAQ,CAAEiB,QAAD,IAAc;MACnB,MAAMC,QAAQ,GAAG,EAAjB;;MACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,QAAQ,CAACG,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;QACtC,MAAME,OAAO,GAAGJ,QAAQ,CAACE,CAAD,CAAxB;;QACA,IAAIE,OAAO,CAACb,EAAR,KAAeF,aAAnB,EAAkC;UAC9BY,QAAQ,CAACI,OAAT,CAAiB,EAAE,GAAGD,OAAL;YAAcV,IAAI,EAAEK;UAApB,CAAjB;QACH,CAFD,MAEO;UACHE,QAAQ,CAACK,IAAT,CAAcF,OAAd;QACH;MACJ;;MACD,OAAOH,QAAP;IACH,CAXO,CAAR;IAaAd,YAAY,CAACoB,OAAb,CAAqB,OAArB,EAA8BtB,IAAI,CAACuB,SAAL,CAAe1B,KAAf,CAA9B;EACH;;EAED,SAAS2B,eAAT,GAA2B;IACvB,OACI3B,KAAK,CAAC4B,IAAN,CAAYC,IAAD,IAAU;MACjB,OAAOA,IAAI,CAACpB,EAAL,KAAYF,aAAnB;IACH,CAFD,KAEMP,KAAK,CAAC,CAAD,CAHf;EAKH;;EAED,oBACI;IAAA,UACKA,KAAK,CAACqB,MAAN,GAAe,CAAf,gBACG,QAAC,KAAD;MACI,KAAK,EAAE,CAAC,EAAD,EAAK,EAAL,CADX;MAEI,SAAS,EAAC,YAFd;MAGI,SAAS,EAAC,OAHd;MAAA,wBAKI,QAAC,OAAD;QACI,KAAK,EAAErB,KADX;QAEI,WAAW,EAAE2B,eAAe,EAFhC;QAGI,gBAAgB,EAAEnB,gBAHtB;QAII,OAAO,EAAEE;MAJb;QAAA;QAAA;QAAA;MAAA,QALJ,EAWKH,aAAa,IAAIP,KAAK,CAACqB,MAAN,GAAe,CAAhC,iBACG,QAAC,MAAD;QACI,WAAW,EAAEM,eAAe,EADhC;QAEI,UAAU,EAAEX;MAFhB;QAAA;QAAA;QAAA;MAAA,QAZR;IAAA;MAAA;MAAA;MAAA;IAAA,QADH,gBAoBG;MAAK,SAAS,EAAC,UAAf;MAAA,wBACI;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ,eAEI;QAAQ,SAAS,EAAC,YAAlB;QAA+B,OAAO,EAAEN,aAAxC;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAFJ;IAAA;MAAA;MAAA;MAAA;IAAA;EArBR;IAAA;IAAA;IAAA;EAAA,QADJ;AA+BH,C,CAED;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GApGwBX,G;;KAAAA,G"},"metadata":{},"sourceType":"module"}