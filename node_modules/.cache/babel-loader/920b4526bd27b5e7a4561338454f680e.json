{"ast":null,"code":"var _jsxFileName = \"/Applications/MAMP/htdocs/Learning/scrimbs/Section 4/notes/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Sidebar from \"./components/Sidebar\";\nimport Editor from \"./components/Editor\";\nimport \"./style.css\";\nimport { data } from \"./data\";\nimport Split from \"react-split\";\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  /**\n   * Challenge:\n   * 1. Every time the `notes` array changes, save it\n   *    in localStorage. You'll need to use JSON.stringify()\n   *    to turn the array into a string to save in localStorage.\n   * 2. When the app first loads, initialize the notes state\n   *    with the notes saved in localStorage. You'll need to\n   *    use JSON.parse() to turn the stringified array back\n   *    into a real JS array.\n   */\n  const [notes, setNotes] = React.useState([]);\n  let myBody;\n\n  function onLoad() {\n    let myBody = JSON.parse(localStorage.getItem(\"notesLocalStorage\")); // console.log(myBody);\n\n    if (notes !== myBody) {// setNotes((prevNotes) => myBody);\n    } // ;\n\n  } // setNotes((prevNotes) => myBody);\n  // React.useEffect(() => {\n  //     setNotes((prevNotes) => myBody);\n  // });\n\n\n  console.log(notes);\n  const [currentNoteId, setCurrentNoteId] = React.useState(notes[0] && notes[0].id || \"\");\n  onLoad();\n\n  function createNewNote() {\n    const newNote = {\n      id: nanoid(),\n      body: \"# Type your markdown note's title here\"\n    };\n    setNotes(prevNotes => [newNote, ...prevNotes]);\n    setCurrentNoteId(newNote.id);\n  }\n\n  function updateNote(text) {\n    setNotes(oldNotes => oldNotes.map(oldNote => {\n      return oldNote.id === currentNoteId ? { ...oldNote,\n        body: text\n      } : oldNote;\n    }));\n    localStorage.setItem(\"notesLocalStorage\", JSON.stringify(notes));\n    console.log(notes);\n  }\n\n  function findCurrentNote() {\n    return notes.find(note => {\n      return note.id === currentNoteId;\n    }) || notes[0];\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: notes.length > 0 ? /*#__PURE__*/_jsxDEV(Split, {\n      sizes: [30, 70],\n      direction: \"horizontal\",\n      className: \"split\",\n      children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n        notes: notes,\n        currentNote: findCurrentNote(),\n        setCurrentNoteId: setCurrentNoteId,\n        newNote: createNewNote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }, this), currentNoteId && notes.length > 0 && /*#__PURE__*/_jsxDEV(Editor, {\n        currentNote: findCurrentNote(),\n        updateNote: updateNote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-notes\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"You have no notes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"first-note\",\n        onClick: createNewNote,\n        children: \"Create one now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n} // If we Need to put every not into key value in localStorage\n\n/*\n    function updateLocalStorage() {\n        notes.filter((el) => {\n            if (el[\"id\"] === currentNoteId) {\n                currentNoteBody = el.body;\n            }\n        });\n        localStorage.setItem(\n            JSON.stringify(currentNoteId),\n            JSON.stringify(currentNoteBody)\n        );\n    }\n*/\n\n_s(App, \"VGu8DdM6YvxodcgSUp6Lv3WpjOU=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Sidebar","Editor","data","Split","nanoid","App","notes","setNotes","useState","myBody","onLoad","JSON","parse","localStorage","getItem","console","log","currentNoteId","setCurrentNoteId","id","createNewNote","newNote","body","prevNotes","updateNote","text","oldNotes","map","oldNote","setItem","stringify","findCurrentNote","find","note","length"],"sources":["/Applications/MAMP/htdocs/Learning/scrimbs/Section 4/notes/src/App.js"],"sourcesContent":["import React from \"react\";\nimport Sidebar from \"./components/Sidebar\";\nimport Editor from \"./components/Editor\";\nimport \"./style.css\";\nimport { data } from \"./data\";\nimport Split from \"react-split\";\nimport { nanoid } from \"nanoid\";\n\nexport default function App() {\n    /**\n     * Challenge:\n     * 1. Every time the `notes` array changes, save it\n     *    in localStorage. You'll need to use JSON.stringify()\n     *    to turn the array into a string to save in localStorage.\n     * 2. When the app first loads, initialize the notes state\n     *    with the notes saved in localStorage. You'll need to\n     *    use JSON.parse() to turn the stringified array back\n     *    into a real JS array.\n     */\n\n    const [notes, setNotes] = React.useState([]);\n    let myBody;\n    function onLoad() {\n        let myBody = JSON.parse(localStorage.getItem(\"notesLocalStorage\"));\n        // console.log(myBody);\n        if (notes !== myBody) {\n            // setNotes((prevNotes) => myBody);\n        }\n        // ;\n    }\n    // setNotes((prevNotes) => myBody);\n    // React.useEffect(() => {\n    //     setNotes((prevNotes) => myBody);\n    // });\n    console.log(notes);\n    const [currentNoteId, setCurrentNoteId] = React.useState(\n        (notes[0] && notes[0].id) || \"\"\n    );\n    onLoad();\n\n    function createNewNote() {\n        const newNote = {\n            id: nanoid(),\n            body: \"# Type your markdown note's title here\",\n        };\n        setNotes((prevNotes) => [newNote, ...prevNotes]);\n        setCurrentNoteId(newNote.id);\n    }\n\n    function updateNote(text) {\n        setNotes((oldNotes) =>\n            oldNotes.map((oldNote) => {\n                return oldNote.id === currentNoteId\n                    ? { ...oldNote, body: text }\n                    : oldNote;\n            })\n        );\n        localStorage.setItem(\"notesLocalStorage\", JSON.stringify(notes));\n        console.log(notes);\n    }\n\n    function findCurrentNote() {\n        return (\n            notes.find((note) => {\n                return note.id === currentNoteId;\n            }) || notes[0]\n        );\n    }\n\n    return (\n        <main>\n            {notes.length > 0 ? (\n                <Split\n                    sizes={[30, 70]}\n                    direction=\"horizontal\"\n                    className=\"split\"\n                >\n                    <Sidebar\n                        notes={notes}\n                        currentNote={findCurrentNote()}\n                        setCurrentNoteId={setCurrentNoteId}\n                        newNote={createNewNote}\n                    />\n                    {currentNoteId && notes.length > 0 && (\n                        <Editor\n                            currentNote={findCurrentNote()}\n                            updateNote={updateNote}\n                        />\n                    )}\n                </Split>\n            ) : (\n                <div className=\"no-notes\">\n                    <h1>You have no notes</h1>\n                    <button className=\"first-note\" onClick={createNewNote}>\n                        Create one now\n                    </button>\n                </div>\n            )}\n        </main>\n    );\n}\n\n// If we Need to put every not into key value in localStorage\n/*\n    function updateLocalStorage() {\n        notes.filter((el) => {\n            if (el[\"id\"] === currentNoteId) {\n                currentNoteBody = el.body;\n            }\n        });\n        localStorage.setItem(\n            JSON.stringify(currentNoteId),\n            JSON.stringify(currentNoteBody)\n        );\n    }\n*/\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}