{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommandOrchestrator = exports.getStateFromTextArea = exports.TextAreaTextApi = void 0;\n\nvar __1 = require(\"..\");\n\nvar InsertTextAtPosition_1 = require(\"../util/InsertTextAtPosition\");\n\nvar command_utils_1 = require(\"./command-utils\");\n\nvar defaults_1 = require(\"./default-commands/defaults\");\n\nvar TextAreaTextApi =\n/** @class */\nfunction () {\n  function TextAreaTextApi(textAreaRef) {\n    this.textAreaRef = textAreaRef;\n  }\n\n  TextAreaTextApi.prototype.replaceSelection = function (text) {\n    var textArea = this.textAreaRef.current;\n    InsertTextAtPosition_1.insertText(textArea, text);\n    return getStateFromTextArea(textArea);\n  };\n\n  TextAreaTextApi.prototype.setSelectionRange = function (selection) {\n    var textArea = this.textAreaRef.current;\n    textArea.focus();\n    textArea.selectionStart = selection.start;\n    textArea.selectionEnd = selection.end;\n    return getStateFromTextArea(textArea);\n  };\n\n  TextAreaTextApi.prototype.getState = function () {\n    var textArea = this.textAreaRef.current;\n    return getStateFromTextArea(textArea);\n  };\n\n  return TextAreaTextApi;\n}();\n\nexports.TextAreaTextApi = TextAreaTextApi;\n\nfunction getStateFromTextArea(textArea) {\n  return {\n    selection: {\n      start: textArea.selectionStart,\n      end: textArea.selectionEnd\n    },\n    text: textArea.value,\n    selectedText: textArea.value.slice(textArea.selectionStart, textArea.selectionEnd)\n  };\n}\n\nexports.getStateFromTextArea = getStateFromTextArea;\n\nvar CommandOrchestrator =\n/** @class */\nfunction () {\n  function CommandOrchestrator(customCommands, textArea, l18n, pasteOptions) {\n    var _this = this;\n\n    this.getCommand = function (name) {\n      var command = _this.commandMap[name];\n\n      if (!command) {\n        throw new Error(\"Cannot execute command. Command not found: \" + name);\n      }\n\n      return command;\n    };\n    /**\n     * Tries to find a command the wants to handle the keyboard event.\n     * If a command is found, it is executed and the function returns\n     */\n\n\n    this.handlePossibleKeyCommand = function (e) {\n      for (var _i = 0, _a = _this.keyActivatedCommands; _i < _a.length; _i++) {\n        var commandName = _a[_i];\n\n        if (_this.getCommand(commandName).handleKeyCommand(e)) {\n          _this.executeCommand(commandName).then(function (r) {});\n\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    if (pasteOptions && !pasteOptions.saveImage) {\n      throw new Error(\"paste options are incomplete. saveImage are required \");\n    }\n\n    this.commandMap = __assign(__assign({}, __1.getDefaultCommandMap()), customCommands || {});\n    this.pasteOptions = pasteOptions;\n    this.keyActivatedCommands = command_utils_1.extractKeyActivatedCommands(customCommands);\n    this.textAreaRef = textArea;\n    this.textApi = new TextAreaTextApi(textArea);\n    this.l18n = l18n;\n  }\n\n  CommandOrchestrator.prototype.executeCommand = function (commandName, context) {\n    return __awaiter(this, void 0, void 0, function () {\n      var command, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this.isExecuting) {\n              // The simplest thing to do is to ignore commands while\n              // there is already a command executing. The alternative would be to queue commands\n              // but there is no guarantee that the state after one command executes will still be compatible\n              // with the next one. In fact, it is likely not to be.\n              return [2\n              /*return*/\n              ];\n            }\n\n            this.isExecuting = true;\n            command = this.commandMap[commandName];\n            result = command.execute({\n              initialState: getStateFromTextArea(this.textAreaRef.current),\n              textApi: this.textApi,\n              l18n: this.l18n,\n              context: context\n            });\n            return [4\n            /*yield*/\n            , result];\n\n          case 1:\n            _a.sent();\n\n            this.isExecuting = false;\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Executes the paste command\n   */\n\n\n  CommandOrchestrator.prototype.executePasteCommand = function (event) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (this.pasteOptions) {\n          return [2\n          /*return*/\n          , this.executeCommand(this.pasteOptions.command || defaults_1.getDefaultSaveImageCommandName(), {\n            pasteOptions: this.pasteOptions,\n            event: event\n          })];\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n  /**\n   * Executes the drop command\n   */\n\n\n  CommandOrchestrator.prototype.executeDropCommand = function (event) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (this.pasteOptions) {\n          return [2\n          /*return*/\n          , this.executeCommand(this.pasteOptions.command || defaults_1.getDefaultSaveImageCommandName(), {\n            pasteOptions: this.pasteOptions,\n            event: event\n          })];\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n  /**\n   * Executes the \"select image\" command\n   */\n\n\n  CommandOrchestrator.prototype.executeSelectImageCommand = function (event) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (this.pasteOptions) {\n          return [2\n          /*return*/\n          , this.executeCommand(this.pasteOptions.command || defaults_1.getDefaultSaveImageCommandName(), {\n            pasteOptions: this.pasteOptions,\n            event: event\n          })];\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n  /**\n   * Returns a command by name\n   * @param name\n   */\n\n\n  CommandOrchestrator.prototype.getCommandByName = function (name) {\n    return this.commandMap[name];\n  };\n\n  return CommandOrchestrator;\n}();\n\nexports.CommandOrchestrator = CommandOrchestrator;","map":null,"metadata":{},"sourceType":"script"}