{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.codeCommand = void 0;\n\nvar MarkdownUtil_1 = require(\"../../util/MarkdownUtil\");\n\nexports.codeCommand = {\n  buttonProps: {\n    \"aria-label\": \"Insert code\"\n  },\n  execute: function execute(_a) {\n    var initialState = _a.initialState,\n        textApi = _a.textApi; // Adjust the selection to encompass the whole word if the caret is inside one\n\n    var newSelectionRange = MarkdownUtil_1.selectWord({\n      text: initialState.text,\n      selection: initialState.selection\n    });\n    var state1 = textApi.setSelectionRange(newSelectionRange); // when there's no breaking line\n\n    if (state1.selectedText.indexOf(\"\\n\") === -1) {\n      textApi.replaceSelection(\"`\" + state1.selectedText + \"`\"); // Adjust the selection to not contain the **\n\n      var selectionStart_1 = state1.selection.start + 1;\n      var selectionEnd_1 = selectionStart_1 + state1.selectedText.length;\n      textApi.setSelectionRange({\n        start: selectionStart_1,\n        end: selectionEnd_1\n      });\n      return;\n    }\n\n    var breaksBeforeCount = MarkdownUtil_1.getBreaksNeededForEmptyLineBefore(state1.text, state1.selection.start);\n    var breaksBefore = Array(breaksBeforeCount + 1).join(\"\\n\");\n    var breaksAfterCount = MarkdownUtil_1.getBreaksNeededForEmptyLineAfter(state1.text, state1.selection.end);\n    var breaksAfter = Array(breaksAfterCount + 1).join(\"\\n\");\n    textApi.replaceSelection(breaksBefore + \"```\\n\" + state1.selectedText + \"\\n```\" + breaksAfter);\n    var selectionStart = state1.selection.start + breaksBeforeCount + 4;\n    var selectionEnd = selectionStart + state1.selectedText.length;\n    textApi.setSelectionRange({\n      start: selectionStart,\n      end: selectionEnd\n    });\n  }\n};","map":null,"metadata":{},"sourceType":"script"}