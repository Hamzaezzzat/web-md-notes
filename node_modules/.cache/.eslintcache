[{"/Applications/MAMP/htdocs/Learning/scrimbs/Section 4/notes/src/index.js":"1","/Applications/MAMP/htdocs/Learning/scrimbs/Section 4/notes/src/App.js":"2","/Applications/MAMP/htdocs/Learning/scrimbs/Section 4/notes/src/data.js":"3","/Applications/MAMP/htdocs/Learning/scrimbs/Section 4/notes/src/components/Sidebar.js":"4","/Applications/MAMP/htdocs/Learning/scrimbs/Section 4/notes/src/components/Editor.js":"5"},{"size":184,"mtime":1652907425525,"results":"6","hashOfConfig":"7"},{"size":3208,"mtime":1653146488680,"results":"8","hashOfConfig":"7"},{"size":414,"mtime":1653131326087,"results":"9","hashOfConfig":"7"},{"size":819,"mtime":1653146825454,"results":"10","hashOfConfig":"7"},{"size":882,"mtime":1653071822000,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"esj7in",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Applications/MAMP/htdocs/Learning/scrimbs/Section 4/notes/src/index.js",[],[],"/Applications/MAMP/htdocs/Learning/scrimbs/Section 4/notes/src/App.js",["29"],[],"import React from \"react\";\nimport Sidebar from \"./components/Sidebar\";\nimport Editor from \"./components/Editor\";\nimport \"./style.css\";\nimport { data } from \"./data\";\nimport Split from \"react-split\";\nimport { nanoid } from \"nanoid\";\n\nexport default function App() {\n    /**\n     * Challenge:\n     * 1. Every time the `notes` array changes, save it\n     *    in localStorage. You'll need to use JSON.stringify()\n     *    to turn the array into a string to save in localStorage.\n     * 2. When the app first loads, initialize the notes state\n     *    with the notes saved in localStorage. You'll need to\n     *    use JSON.parse() to turn the stringified array back\n     *    into a real JS array.\n     */\n\n    const [notes, setNotes] = React.useState(\n        () => JSON.parse(localStorage.getItem(\"notes\")) || []\n    );\n\n    const [currentNoteId, setCurrentNoteId] = React.useState(\n        (notes[0] && notes[0].id) || \"\"\n    );\n    console.log(notes);\n    function createNewNote() {\n        const newNote = {\n            id: nanoid(),\n            body: \"# Type your markdown note's title here\",\n        };\n        setNotes((prevNotes) => [newNote, ...prevNotes]);\n        setCurrentNoteId(newNote.id);\n    }\n\n    function updateNote(text) {\n        setNotes((oldNotes) =>\n            oldNotes.map((oldNote) => {\n                return oldNote.id === currentNoteId\n                    ? { ...oldNote, body: text }\n                    : oldNote;\n            })\n        );\n        localStorage.setItem(\"notes\", JSON.stringify(notes));\n        // console.log(notes);\n    }\n\n    function findCurrentNote() {\n        return (\n            notes.find((note) => {\n                return note.id === currentNoteId;\n            }) || notes[0]\n        );\n    }\n\n    return (\n        <main>\n            {notes.length > 0 ? (\n                <Split\n                    sizes={[30, 70]}\n                    direction=\"horizontal\"\n                    className=\"split\"\n                >\n                    <Sidebar\n                        notes={notes}\n                        currentNote={findCurrentNote()}\n                        setCurrentNoteId={setCurrentNoteId}\n                        newNote={createNewNote}\n                    />\n                    {currentNoteId && notes.length > 0 && (\n                        <Editor\n                            currentNote={findCurrentNote()}\n                            updateNote={updateNote}\n                        />\n                    )}\n                </Split>\n            ) : (\n                <div className=\"no-notes\">\n                    <h1>You have no notes</h1>\n                    <button className=\"first-note\" onClick={createNewNote}>\n                        Create one now\n                    </button>\n                </div>\n            )}\n        </main>\n    );\n}\n\n// If we Need to put every not into key value in localStorage\n/*\n    function updateLocalStorage() {\n        notes.filter((el) => {\n            if (el[\"id\"] === currentNoteId) {\n                currentNoteBody = el.body;\n            }\n        });\n        localStorage.setItem(\n            JSON.stringify(currentNoteId),\n            JSON.stringify(currentNoteBody)\n        );\n    }\n*/\n",[],"/Applications/MAMP/htdocs/Learning/scrimbs/Section 4/notes/src/data.js",[],[],"/Applications/MAMP/htdocs/Learning/scrimbs/Section 4/notes/src/components/Sidebar.js",[],[],"/Applications/MAMP/htdocs/Learning/scrimbs/Section 4/notes/src/components/Editor.js",[],[],{"ruleId":"30","severity":1,"message":"31","line":5,"column":10,"nodeType":"32","messageId":"33","endLine":5,"endColumn":14},"no-unused-vars","'data' is defined but never used.","Identifier","unusedVar"]